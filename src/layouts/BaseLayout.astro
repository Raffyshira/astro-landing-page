---
import "@/styles/globals.css";

import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

import { ViewTransitions } from "astro:transitions";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description } = Astro.props;

---

<script is:inline>
  const setTheme = () => {
    const theme = (() => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      }
      return "light";
    })();

    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }

    window.localStorage.setItem("theme", theme || "light");
  };

  setTheme();

  document.addEventListener("astro:after-swap", setTheme);
</script>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark': 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add': 'remove']('dark');
  
  const currentTheme = getThemePreference();
  setTheme(currentTheme);

  // Update theme on page transition
  document.addEventListener('astro:after-swap', () => setTheme(getThemePreference()));


  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark': 'light');
    });
    observer.observe(document.documentElement, {
      attributes: true, attributeFilter: ['class']
    });
  }
</script>

<!doctype html>
<html lang="en" dir="ltr">
  <head>
    <title>{title}</title>
    <meta charset="utf-8" />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="robots" content="index, follow" />
    <link rel="icon" type="image/x-icon" href="/logo-baru.png">
    <link rel="apple-touch-icon" href="/logo-baru.png">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="googlebot" content="index, follow" />
    <meta name="generator" content={Astro.generator} />
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
    
    <link rel="canonical" href={canonicalURL} />
    
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={Astro.site + "logo-baru.png"} />
    <meta property="og:locale" content="en" />
    
    <meta property="twitter:card" content="summary" />
    <meta property="twitter:url" content="@raffyshira" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={Astro.site + "logo-baru.png"} />
    
    <ViewTransitions />
    <!-- <script is:inline>
    // The configured mode is stored in local storage
    const isDarkMode = localStorage.getItem('theme');

    // Set theme to 'dark' if darkMode = 'true'
    const theme = isDarkMode === 'true' ? 'dark' : '';

    // Put dark class on html tag to enable dark mode
    document.querySelector("html").className = theme;

  </script> -->
  </head>
  <body>
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>